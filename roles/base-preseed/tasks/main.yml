---

- name: "Rename hostname to intended hostname"
  hostname:
    name: "{{ inventory_hostname }}"
  when: 'inventory_hostname != "localhost"'
  ignore_errors: true

- name: "Ensure sudo-Groups exists"
  group:
    name: "{{ item }}"
    state: present
  with_items:
    - sudo
    - wheel
    - ssh-login

- name: "Ensure Management Users exists"
  user:
    name: "{{ item.name }}"
    comment: "{{ item.comment }}"
    state: present
    shell: "/bin/bash"
    groups: "sudo,wheel,ssh-login"
    system: "{{ item.system }}"
  with_items:
    - { name: ansible, comment: "Ansible User for Provisioning with Ansible", system: yes }
    #- { name: admin, comment: "Management User - admin", system: no }
    - { name: fachadmin, comment: "Management User - fachadmin", system: no }

- name: "Ensure that admin-users 'ansible' can login via SSH Public Key (Transfere Public Key)"
  authorized_key:
    user: "ansible"
    key: "{{ lookup('file', '{{ item }}' )}}"
    state: present
  with_fileglob:
    - "files/ssh-keys/ansible/*.pub"

- name: "Ensure that admin-users '{{ ansible_user_id }}' can login via SSH Public Key (Transfere Public Key)"
  authorized_key:
    user: "{{ ansible_user_id }}"
    key: "{{ lookup('file', '{{ item }}' )}}"
    state: present
  with_fileglob:
    - "files/ssh-keys/ansible/*.pub"

- name: "Update sshd_config"
  template:
    dest: "/etc/ssh/sshd_config"
    src: "sshd_config_debian10.j2"
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"
  notify:
    - "Reload sshd"

- name: "Ensure that Management Users can sudo without password (Configure sudoer-file)"
  template:
    dest: "/etc/sudoers"
    src: "sudoers.j2"
    owner: root
    group: root
    mode: "u=r,g=r,o="
    validate: "visudo -cf %s"

- name: "Ensure Base-Packages (common) are installed (Debian/Ubuntu)"
  apt:
    name:
      #- aptitude
      - ssl-cert
      - software-properties-common
      - apt-transport-https
      - facter
      - ohai
      - python3
      - python3-dev
      - python3-setuptools
      - python3-pip
      #- python3-venv
      - vim
      - curl
      - wget
      - bzip2
      - gzip
      - unzip
      - libffi-dev
      - libssl-dev
      #
      - git-core
      #- language-pack-de
    state: present
    update_cache: no
  when: ansible_os_family == "Debian"

- name: "Cleanup YUM (RedHat/CentOS)"
  command: yum clean all
  when: ansible_os_family == "RedHat" and ansible_distribution == "CentOS"

- name: "Cleanup YUM Cache (RedHat/CentOS)"
  file:
    path: /var/cache/yum
    state: absent
  when: ansible_os_family == "RedHat" and ansible_distribution == "CentOS"

# - name: "Install Repositories (RedHat/CentOS)"
#   yum:
#     name={{ item }}
#     state=present
#     update_cache=no
#   with_items:
#     #- https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
#     #- https://centos7.iuscommunity.org/ius-release.rpm
#     #- https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm
#     #- epel-release
#     #- centos-release-scl
#   when: ansible_os_family == "RedHat" and ansible_distribution == "CentOS"

- name: "Ensure Base-Packages (common) are installed (RedHat/CentOS)"
  yum:
    name:
      - yum-plugin-ps
      - yum-plugin-security
      - ca-certificates
      #- update-notifier-common
      #- software-properties-common
      - facter
      #- ohai
      - python
      - python-devel
      - python-setuptools
      - python-pip
      - python-virtualenv
      - python34
      - python34-devel
      - python34-setuptools
      #- python34-pip
      #- python34-virtualenv
      - vim
      - curl
      - wget
      - zlib
      - zlib-devel
      - bzip2
      - gzip
      - unzip
      - libffi-devel
      - openssl-devel
      #
      - git-core
    state: present
    update_cache: no
  when: ansible_os_family == "RedHat"

- name: "Gobal Git Conf to use https.// instead of git:// for Github."
  git_config:
    name: 'url."https://github.com".insteadOf'
    value: "git://github.com"
    scope: global

- name: "Ensure Base-Packages (Analysis Tools / top's) are installed (Debian/Ubuntu)"
  apt:
    name:
      - htop
      - atop
      - iftop
      - itop
      - iotop
      - jnettop
      - dnstop
      - logtop
      - powertop
      - kerneltop{{ item }}
    state: present
    update_cache: no
  when: ansible_os_family == "Debian"

- name: "Ensure Base-Packages (Analysis Tools / top's) are installed (RedHat/CentOS)"
  yum:
    name:
    - htop
    - atop
    - iftop
    #- itop
    - iotop
    #- jnettop
    - dnstop
    #- logtop
    - powertop
    #- kerneltop
    state: present
    update_cache: no
  when: ansible_os_family == "RedHat"

#- name: "Ensure Data Directory exists"
#  file:
#    path: "/data"
#    state: directory
#    owner: root
#    group: root
#    mode: "u=rwx,g=rx,o=rx"

- name: "Set Cron Tab for Auto Upgrade (safe) (Debian/Ubuntu)"
  cron:
    name: "Hourly Safe Upgrades"
    job: "aptitude safe-upgrade -y"
    user: 'root'
    state: present
    special_time: hourly
  become: true
  when: ansible_os_family == "Debian"

- name: "Set Cron Tab for Auto Upgrade (safe) (RedHat/CentOS)"
  cron:
    name: "Hourly Safe Upgrades"
    job: "yum update -y --security"
    user: 'root'
    state: present
    special_time: hourly
  become: true
  when: ansible_os_family == "RedHat"

#- name: "Ensure Server knows own name in /etc/hosts"
#  lineinfile:
#    line: "127.0.0.1\tlocalhost {{ ansible_hostname }} {{ ansible_fqdn }}"
#    regexp: '^127\.0\.0\.1'
#    dest: "/etc/hosts"
#    state: present
#    owner: root
#    group: root
#    mode: "u=rw,g=r,o=r"

...
