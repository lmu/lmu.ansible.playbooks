---

- name: "Ensure base dependencies for psdash are installed (Debian/Ubuntu)"
  apt:
    pkg="{{ item }}"
    state=present
    update_cache=no
    install_recommends=yes
  with_items:
    - "python-dev"
    - "python-virtualenv"
    - "build-essential"
    - "libzmq-dev"
  when: ansible_os_family == "Debian"

- name: "Ensure base dependencies for psdash are installed (RedHat/CentOS)"
  yum:
    pkg="{{ item }}"
    state=present
    update_cache=no
  with_items:
    - "python-devel"
    - "python-virtualenv"
    - "@Development tools"
    - "zeromq-devel"
  when: ansible_os_family == "RedHat"

- name: "Ensure psdash path: '{{ psdash.path | default('/usr/local/venv-psdash') }}' exists"
  file:
    path="{{ psdash.path | default('/usr/local/venv-psdash') }}"
    state=directory
    owner=root
    group=root
    mode="u=rwx,g=rwx,o=rx"

- name: "Set psdash requirements.txt"
  template:
    src: requirements.txt.j2
    dest: "{{ psdash.path | default('/usr/local/venv-psdash') }}/requirements.txt"
    owner: root
    group: root
    mode: "u=rwx,g=rx,o=rx"
  vars:
    req_items:
      - psdash

- name: "Install psdash"
  pip:
    requirements="{{ psdash.path | default('/usr/local/venv-psdash') }}/requirements.txt"
    state=present
    virtualenv="{{ psdash.path | default('/usr/local/venv-psdash') }}"
    chdir="{{ psdash.path | default('/usr/local/venv-psdash') }}"
  environment:
    http_proxy: "{{ lookup('env', 'http_proxy') }}"
    https_proxy: "{{ lookup('env', 'https_proxy') }}"

- name: "Ensure psdash path: '{{ psdash.path }}' has right user settings and permissions"
  file:
    path="{{ psdash.path | default('/usr/local/venv-psdash') }}"
    state=directory
    owner=root
    group=root
    mode="u=rwx,g=rwx,o=rx"

- name: "Install Supervisor Conf for psdash-agent"
  template:
    src: psdash-agent-supervisor.conf.j2
    dest: "/etc/supervisor/conf.d/psdash.conf"
    owner: root
    group: root
    mode: "u=rwx,g=rx,o=rx"
  when: psdash.mode == "agent"
  #notify:
  #  - "Reload Supervisor"
  #  - "Restart Supervisor"

- name: "Install psdash-master.conf"
  template:
    src: psdash-master.py.j2
    dest: "/etc/psdash.py"
    owner: root
    group: root
    mode: "u=rwx,g=rx,o=rx"
  when: psdash.mode == "master"

- name: "Install Supervisor Conf for psdash-master"
  template:
    src: psdash-master-supervisor.conf.j2
    dest: "/etc/supervisor/conf.d/psdash-master.conf"
    owner: root
    group: root
    mode: "u=rwx,g=rx,o=rx"
  when: psdash.mode == "master"
  #notify:
  #  - "Reload Supervisor"
  #  - "Restart Supervisor"

- name: "Remove psdash"
  file:
    path="{{ psdash.path | default('/usr/local/venv-psdash') }}"
    state=absent
    owner=root
    group=root
    mode="u=rwx,g=rwx,o=rx"
  with_items:
    - "/etc/supervisor/conf.d/psdash.conf"
    - "/etc/psdash.py"
    - "{{ psdash.path | default('/usr/local/venv-psdash') }}"
  when: psdash.mode == "absent"
  notify:
    - "Reload Supervisor"
    - "Restart Supervisor"

- name: "Update Supervisorctl - Ensure psdash-agent are present"
  supervisorctl:
    name={{ item }}
    state=present
    username={{ supervisor.username }}
    password={{ supervisor.password }}
  with_items:
    - "psdash-agent"
  when: psdash.mode == "agent"

- name: "Update Supervisorctl - Ensure psdash-master are present"
  supervisorctl:
    name={{ item }}
    state=present
    username={{ supervisor.username }}
    password={{ supervisor.password }}
  with_items:
    - "psdash-master"
  when: psdash.mode == "master"

- name: "Start psdash-agent via Supervisor"
  supervisorctl:
    name={{ item }}
    state=started
    username={{ supervisor.username }}
    password={{ supervisor.password }}
  with_items:
    - "psdash-agent"
  when: psdash.mode == "agent"

- name: "Start psdash-master via Supervisor"
  supervisorctl:
    name={{ item }}
    state=started
    username={{ supervisor.username }}
    password={{ supervisor.password }}
  with_items:
    - "psdash-master"
  when: psdash.mode == "master"
