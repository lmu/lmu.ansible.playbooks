# {{ ansible_managed }}

{% for name, instance in redmine_instance.items() %}
upstream redmine_{{ instance.name | regex_replace('\.', '_') }} {
  server unix://{{ redmine.run_base_path}}/{{ instance.name }}-puma.sock fail_timeout=0;
}
{% endfor %}

server {
  listen {{ redmine.nginx_port }};
  listen [::]:{{ redmine.nginx_port }};
  server_name {{ redmine.domain }};

  return 301 https://$server_name$request_uri;
}

server {
  listen {{ redmine.nginx_ssl_port }} ssl http2 default_server;
  server_name {{ redmine.domain }};

  ssl_certificate /etc/ssl/private/{{ redmine.domain }}_chained_crt.pem; # Chain
  ssl_certificate_key /etc/ssl/private/{{ redmine.domain }}_key.pem; # Key
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  # see https://cipherli.st/
  ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;

  # ~2 seconds is often enough for most folks to parse HTML/CSS and
  # retrieve needed images/icons/frames, connections are cheap in
  # nginx so increasing this is generally safe...
  keepalive_timeout 5;

  # path for static files
  root /var/www/htdocs;
  access_log {{ redmine.log_base_path}}/production.access.log;
  error_log {{ redmine.log_base_path}}/production.error.log info;

  # this rewrites all the requests to the maintenance.html
  # page if it exists in the doc root. This is for capistrano's
  # disable web task
  if (-f $document_root/maintenance.html) {
    rewrite  ^(.*)$  /maintenance.html last;
    break;
  }

{% for name, instance in redmine_instance.items() %}
  location ^~ /{{ instance.alias }} {
    alias {{ redmine.app_base_path}}/{{ instance.name }}/public;

    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_redirect off;

    proxy_pass http://redmine_{{ instance.name | regex_replace('\.', '_') }}/{{ instance.alias }}/;

    proxy_connect_timeout      90;
    proxy_send_timeout         90;
    proxy_read_timeout         90;
  }

{% for alias in instance.aliases %}
  location ^~ /{{ alias }} {
    alias {{ redmine.app_base_path}}/{{ instance.name }}/public;

    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_redirect off;

    proxy_pass http://redmine_{{ instance.name | regex_replace('\.', '_') }};

    proxy_connect_timeout      90;
    proxy_send_timeout         90;
    proxy_read_timeout         90;
  }

{% endfor %}
{% endfor %}

  location / {
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    proxy_redirect off;
    proxy_read_timeout 300;

    # If the file exists as a static file serve it directly without
    # running all the other rewite tests on it
    if (-f $request_filename) {
      break;
    }

    # check for index.html for directory index
    # if its there on the filesystem then rewite
    # the url to add /index.html to the end of it
    # and then break to send it to the next config rules.
    if (-f $request_filename/index.html) {
      rewrite (.*) $1/index.html break;
    }

    # this is the meat of the rack page caching config
    # it adds .html to the end of the url and then checks
    # the filesystem for that file. If it exists, then we
    # rewite the url to have explicit .html on the end
    # and then send it on its way to the next config rule.
    # if there is no file on the fs then it sets all the
    # necessary headers and proxies to our upstream mongrels
    if (-f $request_filename.html) {
      rewrite (.*) $1.html break;
    }

    # proxy_pass "http://redmine_{{ instance.name | regex_replace('\.', '_') }}";#/{{ instance.name }}/";
    break;
    # try_files $uri/index.html $uri.html $uri @ruby;
  }


  # Now this supposedly should work as it gets the filenames with querystrings that Rails provides.
  # BUT there's a chance it could break the ajax calls.
  location ~* \.(ico|css|gif|jpe?g|png)(\?[0-9]+)?$ {
     expires max;
     break;
  }

  location ~ ^/javascripts/.*\.js(\?[0-9]+)?$ {
     expires max;
     break;
  }

  # Error pages
  # error_page 500 502 503 504 /500.html;
  location = /500.html {
    root /redmine/current/public;
  }
}
