#!/usr/bin/env puma

# app do |env|
#   puts env
#
#   body = 'Hello, World!'
#
#   [200, { 'Content-Type' => 'text/plain', 'Content-Length' => body.length.to_s }, [body]]
# end

environment 'production'
daemonize false

pidfile '{{ redmine.run_base_path}}/{{ instance.name }}-puma.pid'
state_path '{{ redmine.run_base_path}}/{{ instance.name }}-puma.state'

stdout_redirect '{{ redmine.log_base_path}}/{{ instance.name }}/puma.log', '{{ redmine.log_base_path}}/{{ instance.name }}/puma_err.log', true
# debug
# quiet

config.log_level = :debug

threads 0, 16
bind 'unix://{{ redmine.run_base_path}}/{{ instance.name }}-puma.sock'
{% if instance.puma_port is defined %}
bind 'tcp://0.0.0.0:{{ instance.puma_port}}'
{% endif %}

# ssl_bind '127.0.0.1', '9292', { key: path_to_key, cert: path_to_cert }

# on_restart do
#   puts 'On restart...'
# end

# restart_command '/u/app/lolcat/bin/restart_puma'


# === Cluster mode ===

# workers 2
workers "{{ ansible_processor_cores }}"

# on_worker_boot do
#   puts 'On worker boot...'
# end

# === Puma control rack application ===

activate_control_app 'unix://{{ redmine.run_base_path}}/{{ instance.name }}-pumactl.sock', { no_token: true }
#activate_control_app 'tcp://127.0.0.1:3001', { no_token: true }
