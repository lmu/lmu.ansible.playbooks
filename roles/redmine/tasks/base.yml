---

- name: "Ensure Ruby PPA is avaliable"
  apt_repository:
    repo="{{ redmine.ruby_ppa }}"
    state=present
  when: 'ansible_distribution == "Ubuntu" and redmine.use_ppa == "yes"'
  tags:
    - setup

- name: "Ensure Ruby is installed"
  apt:
    pkg={{ item }}
    state=present
    update_cache=yes
    install_recommends=yes
  with_items:
    - "{{ redmine.ruby_version }}"
    - "{{ redmine.ruby_version }}-dev"
    - ruby-dev
    #- bundler
    - build-essential
    - git
    - subversion
    - gawk
    - libffi-dev
    - libgdbm-dev
    - libncurses5-dev
    - libreadline6-dev
    - libssl-dev
    - libyaml-dev
    - libxml2-dev
    - libxslt1-dev
  when: 'ansible_os_family == "Debian"'

- name: "Ensure Ruby dependencies are installed"
  apt:
    pkg={{ item }}
    state=build-dep
    update_cache=no
    install_recommends=yes
  with_items:
    - imagemagick
    - libmagick++-dev
    - libmagickcore-dev
    - libmagickwand-dev
    - ruby-rmagick
  when: ansible_os_family == "Debian"

- name: "Ensure Group redmine exists"
  group:
    name="redmine"
    state=present
    gid=980

- name: "Ensure User redmine exists"
  user:
    name="redmine"
    group="redmine"
    force=true
    uid=980
    state=present

- name: "Ensure Base directories exists"
  file:
    path="{{ item }}"
    state=directory
    owner=redmine
    group=redmine
    mode="u=rwx,g=rwx,o=rx"
  with_items:
    - "{{ redmine.app_base_path }}"
    - "{{ redmine.data_base_path }}"
    - "{{ redmine.log_base_path }}"
    - "{{ redmine.run_base_path }}"

- name: "Ensure Run Directory exists (via CronTab)"
  cron:
    name="Create /var/run/redmine on Boot"
    state=present
    user=root
    special_time=reboot
    job="mkdir -p /var/run/redmine; chown -R redmine:redmine /var/run/redmine; chmod -R u=rwx,g=rwx,o=rx /var/run/redmine"

- name: "Update bundler for Ruby"
  gem:
    name=bundler
    state=latest
    executable="{{ redmine.rubygem_version }}"
    user_install=no
  become: true
  become_user: root
  environment:
    http_proxy: "{{ lookup('env', 'https_proxy') }}"
    https_proxy: "{{ lookup('env', 'https_proxy') }}"

- name: "Create DB User"
  postgresql_user:
    name="{{ redmine_db.user }}"
    password="{{ redmine_db.passwd }}"
    role_attr_flags="SUPERUSER"
    #role_attr_flags="NOSUPERUSER,CREATEDB,CREATEROLE,CREATEUSER"
  become_user: postgres
  become: yes

...
