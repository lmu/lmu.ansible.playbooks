---

- set_fact: instance="{{ item.value }}"

- debug: msg="outer item={{ instance }} "

- name: "Shutdown Puma via Supervisor for {{ instance.name }}"
  supervisorctl:
      name="puma-{{ instance.name }}"
      state=stopped
  ignore_errors: true

- name: "Create Redmine Database for {{ instance.name }}"
  postgresql_db:
    name="{{ instance.db_name }}"
    login_user="{{ instance.db_user}}"
    login_password="{{ instance.db_passwd }}"
    login_host=127.0.0.1
    encoding='UTF-8'
    template='template0'
    state=present
    owner="{{ instance.db_user}}"
    lc_ctype='de_DE.UTF-8'
    lc_collate='de_DE.UTF-8'

- name: "Ensure Redmine Instance directories exists"
  file:
    path="{{ item }}/{{ instance.name }}"
    state=directory
    owner=redmine
    group=redmine
    mode="u=rwx,g=rx,o=rx"
  with_items:
    #- "{{ redmine.app_base_path }}"
    - "{{ redmine.data_base_path }}"
    - "{{ redmine.log_base_path }}"

- name: "Download Redmine"
  subversion:
    repo="https://svn.redmine.org/redmine/branches/{{ redmine.svn_version }}-stable"
    dest="{{ redmine.app_base_path }}/{{ instance.name }}"
    force=yes

- name: "Copy Redmine Plugins ({{ instance.name }})"
  copy:
    src="/tmp/redmine-plugins/{{ item }}"
    dest="{{ redmine.app_base_path }}/{{ instance.name }}/plugins"
    force=yes
    owner=redmine
    group=redmine
    mode="u=rwx,g=rx,o=rx"
  with_items:
    - "{{ instance.plugins }}"

- name: "Copy Redmine Themes ({{ instance.name }})"
  copy:
    src="/tmp/redmine-themes/{{ item }}"
    dest="{{ redmine.app_base_path }}/{{ instance.name }}/public/themes"
    force=yes
    owner=redmine
    group=redmine
    mode="u=rwx,g=rx,o=rx"
  with_items:
    - "{{ instance.themes }}"

- name: "Copy Dependency File ({{ instance.name }})"
  copy:
    src="Gemfile.local"
    dest="{{ redmine.app_base_path}}/{{ instance.name }}/Gemfile.local"
    force=yes
    owner=redmine
    group=redmine
    mode="u=rwx,g=r,o=r"

- name: "Copy Config Files ({{ instance.name }})"
  template:
    src={{ item }}.j2
    dest="{{ redmine.app_base_path}}/{{ instance.name }}/config/{{ item }}"
    force=yes
    owner=redmine
    group=redmine
    mode="u=rwx,g=rx,o=rx"
  with_items:
    - database.yml
    - additional_environment.rb
    - configuration.yml
    - settings.yml
    - puma.rb

- name: "Ensure Redmine can write gems directory"
  file:
    path="{{ redmine.app_base_path}}/{{ instance.name }}/vendor/bundle"
    state=directory
    owner=redmine
    group=redmine
    mode="u=rwx,g=rx,o=rx"
    recurse=yes

- name: "Ensure Redmine Instance directory has correct user and file modes"
  file:
    path="{{ redmine.app_base_path}}/{{ instance.name }}"
    state=directory
    owner=redmine
    group=redmine
    mode="u=rwx,g=rx,o=rx"
    recurse=yes

- block:

  - name: "Install Redmine ({{ instance.name }})"
    bundler:
      state=present
      chdir="{{ redmine.app_base_path}}/{{ instance.name }}/"
      gem_path="vendor/bundle"
      exclude_groups="test development"
      #gemfile="{{ redmine.app_base_path}}/{{ instance.name }}/Gemfile"
      #gem_path="{{ redmine.app_base_path}}/{{ instance.name }}/vendor/bundle"

  - name: "Generate Session Store Secret ({{ instance.name }})"
    command: bundle exec rake generate_secret_token
      chdir="{{ redmine.app_base_path}}/{{ instance.name }}"

  - name: "Create Database Schema Objects ({{ instance.name }})"
    command: bundle exec rake db:migrate
      chdir="{{ redmine.app_base_path}}/{{ instance.name }}"

  - name: "Load Database default data ({{ instance.name }})"
    command: bundle exec rake redmine:load_default_data
      creates="default_data.exists"
      chdir="{{ redmine.app_base_path}}/{{ instance.name }}"
    register: default_data

  - name: "Create default_data.exists file to prevent multiple Database creation ({{ instance.name }})"
    file:
      path="{{ redmine.app_base_path}}/{{ instance.name }}/default_data.exists"
      state=touch
      owner=redmine
      group=redmine
      mode="u=rx,g=rx,o=rx"
    when: "default_data.rc == 0"

  - name: "Create Database Schema Objects for Plugins (redmine:plugins) ({{ instance.name }})"
    command: bundle exec rake redmine:plugins
      chdir="{{ redmine.app_base_path}}/{{ instance.name }}"

  - name: "Create Database Schema Objects for Plugins (redmine:plugins:migrate) ({{ instance.name }})"
    command: bundle exec rake redmine:plugins:migrate
      chdir="{{ redmine.app_base_path}}/{{ instance.name }}"

  - name: "Create Database Schema Objects for Plugins explicite ({{ instance.name }})"
    command: bundle exec rake redmine:plugins NAME={{ item }}
      chdir="{{ redmine.app_base_path}}/{{ instance.name }}"
    with_items: "{{ instance.plugins }}"

  - name: "Cleanup ({{ instance.name }})"
    command: bundle exec rake tmp:cache:clear tmp:sessions:clear
      chdir="{{ redmine.app_base_path}}/{{ instance.name }}"

  become: yes
  become_user: "redmine"
  environment:
    PATH: "{{ redmine.app_base_path}}/{{ instance.name }}/vendor/bundle/ruby/2.0.0/bin:{{ lookup('env', 'PATH') }}"
    RAILS_ENV: production
    REDMINE_LANG: "{{ instance.lang }}"
  tags:
    - setup

- name: "Ensure Redmine Instance directory has correct user and file modes"
  file:
    path="{{ redmine.app_base_path}}/{{ instance.name }}"
    state=directory
    owner=redmine
    group=redmine
    mode="u=rx,g=rx,o=rx"
    recurse=yes
  tags:
    - setup

- name: "Ensure Redmine Instance Runtime directory exists"
  file:
    path="{{ item }}"
    state=directory
    owner=redmine
    group=redmine
    mode="u=rwx,g=rwx,o=rx"
    recurse=yes
  with_items:
    #- "{{ redmine.run_base_path}}"
    - "{{ redmine.log_base_path}}/{{ instance.name }}"
  tags:
    - setup

- name: "Ensure Redmine Instance sub directories has correct user and file modes"
  file:
    path="{{ redmine.app_base_path}}/{{ instance.name }}/{{ item }}"
    state=directory
    owner=redmine
    group=redmine
    mode="u=rwx,g=rx,o=rx"
    recurse=yes
  with_items:
    - files
    - log
    - tmp
    - tmp/pdf
    - public/plugin_assets
  tags:
    - setup

- name: "Start/Restart Puma via Supervisor for {{ instance.name }}"
  supervisorctl:
      name="puma-{{ instance.name }}"
      state=restarted
  ignore_errors: true

...
