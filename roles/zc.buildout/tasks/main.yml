---

- include: base.yml


- name: Ensure buildout directory exists
  file: 
    path="{{ buildout.path }}{{ buildout.directory }}"
    state=directory
    owner=plone_buildout
    group=plone_group
    mode="u=rwx,g=rx,o=rx"

- name: Checkout buildout from git
  git:
    repo={{ buildout.src.src }}
    dest="{{ buildout.path }}{{ buildout.directory }}"
    clone=yes
    remote=origin
    update=yes
    version={{ buildout.src.rev }}
    force=yes
  when: buildout.src.type|lower == "git" and buildout.src.src
  become_user: plone_buildout
  environment:
    http_proxy: "{{ lookup('env', 'http_proxy') }}"
    https_proxy: "{{ lookup('env', 'https_proxy') }}"

- name: Checkout buildout from subversion
  subversion:
    repo={{ buildout.src.src }}
    dest="{{ buildout.path }}{{ buildout.directory }}"
    revision={{ buildout.src.rev }}
  when: buildout.src.type|lower == "svn" and buildout.src.src
  become_user: plone_buildout
  environment:
    http_proxy: "{{ lookup('env', 'http_proxy') }}"
    https_proxy: "{{ lookup('env', 'https_proxy') }}"

- name: Ensure buildout-directory is owned by user plone_buildout
  file:
    path="{{ buildout.path }}{{ buildout.directory }}"
    mode="u=rwx,g=rx,o=rx"
    owner=plone_buildout
    group=plone_group
    recurse=yes
    state=directory

- name: Create virtualenv in buildout directory
  command: virtualenv --no-pip --no-setuptools --no-wheel --no-site-packages {{ buildout.path }}{{ buildout.directory }}
    chdir="{{ buildout.path }}"
    creates="{{ buildout.path }}{{ buildout.directory }}/bin/activate"
  #register: virtualenv_setup
  #ignore_errors: yes
  #failed_when: "'Permission denied' in virtualenv_setup.stderr"

- name: Ensure buildout-directory is owned by user plone_buildout
  file:
    path="{{ buildout.path }}{{ buildout.directory }}"
    mode="u=rwx,g=rx,o=rx"
    owner=plone_buildout
    group=plone_group
    recurse=yes
    state=directory

- name: Ensure a /data/{{buildout.directory}}/var directory owned by user plone_daemon exists
  file:
    path=/data/{{ buildout.directory }}/var
    mode="u=rwx,g=rwx,o=rx"
    owner=plone_daemon
    group=plone_group
    recurse=yes
    state=directory

- name: Ensure buildout-var-directory is aktually a symlink to /data/{{buildout.directory}}/var owned by user plone_daemon
  file:
    path="{{ buildout.path }}{{ buildout.directory }}/var"
    src=/data/{{ buildout.directory }}/var
    owner=plone_daemon
    group=plone_group
    state=link
    force=yes

- name: Ensure buildout-var-directory is owned by user plone_daemon
  file:
    path="{{ buildout.path }}{{ buildout.directory }}/var/."
    mode="u=rwx,g=rwx,o=rx"
    owner=plone_daemon
    group=plone_group
    recurse=yes
    state=directory

- name: Preset Buildout config
  file:
    path="{{ buildout.path }}{{ buildout.directory }}/buildout.cfg"
    src="{{ buildout.path }}{{ buildout.directory }}/{{ buildout.config }}"
    state=link
    owner=plone_buildout
    group=plone_group

- name: Copy secrets.cfg if provided
  template:
    dest="{{ buildout.path }}{{ buildout.directory }}/secrets.cfg"
    src={{ buildout.secrets }}
    owner=plone_buildout
    group=plone_group
    mode="u=r,g=,o="
  when: buildout.requires_secrets

- name: ensure supervisor conf.d directory is writeable for plone_buildout
  file:
    path=/etc/supervisor/conf.d
    state=directory
    owner=plone_buildout
    group=plone_group
    mode="u=rwx,g=rx,o=rx"

- name: Bootstrap buildout
  command: python bootstrap.py --version=2.4.4 --setuptools-version=18.4
    chdir="{{ buildout.path }}{{ buildout.directory }}"
    creates="{{ buildout.path }}{{ buildout.directory }}/bin/buildout"
  environment:
    VIRTUAL_ENV: "{{ buildout.path }}{{ buildout.directory }}"
    PATH: "{{ buildout.path }}{{ buildout.directory }}/bin:{{ ansible_env.PATH }}"
    http_proxy: "{{ lookup('env', 'http_proxy') }}"
    https_proxy: "{{ lookup('env', 'https_proxy') }}"
  become_user: plone_buildout

- name: delete dirty src folder
  command: rm -rf */
    chdir="{{ buildout.path }}{{ buildout.directory }}/src"

- name: Run buildout
  command: ./bin/buildout
    chdir="{{ buildout.path }}{{ buildout.directory }}"
  environment:
    VIRTUAL_ENV: "{{ buildout.path }}{{ buildout.directory }}"
    PATH: "{{ buildout.path }}{{ buildout.directory }}/bin:{{ ansible_env.PATH }}"
    http_proxy: "{{ lookup('env', 'http_proxy') }}"
    https_proxy: "{{ lookup('env', 'https_proxy') }}"
  become_user: plone_buildout

- name: delete existing mo files of buildout-cache
  command: find . -iname *.mo -delete
    chdir="/usr/local/buildout-cache"
  become_user: plone_buildout

- name: Compile po to po.mo files of buildout-cache
  command: find . -iname *.po -exec msgfmt {} -o {}.mo \;
    chdir="/usr/local/buildout-cache"
  become_user: plone_buildout

- name: rename po.mo to mo files of buildout-cache
  command: find . -iname *.po.mo -exec rename 's/.po.mo/.mo/' {} \;
    chdir="/usr/local/buildout-cache"
  become_user: plone_buildout

- name: delete existing mo files of src
  command: find . -iname *.mo -delete
    chdir="{{ buildout.path }}{{ buildout.directory }}/src"
  become_user: plone_buildout

- name: Compile po to po.mo files of src
  command: find . -iname *.po -exec msgfmt {} -o {}.mo \;
    chdir="{{ buildout.path }}{{ buildout.directory }}/src"
  become_user: plone_buildout

- name: rename po.mo to mo files of src
  command: find . -iname *.po.mo -exec rename 's/.po.mo/.mo/' {} \;
    chdir="{{ buildout.path }}{{ buildout.directory }}/src"
  become_user: plone_buildout

- name: set normal file rights for supervisor conf.d directory
  file:
    path=/etc/supervisor/conf.d
    state=directory
    owner=root
    group=root
    mode="u=rwx,g=rx,o=rx"