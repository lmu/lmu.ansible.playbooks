---

- include: base.yml

- name: Ensure buildout program directory exists
  file:
    path: "{{ buildout.program_path }}/{{ buildout.directory }}"
    state: directory
    owner: plone_buildout
    group: plone_group
    mode: "u=rwx,g=rx,o=rx"
    recurse: yes

- name: Ensure buildout data directory exists
  file:
    path: "{{ buildout.data_path }}/{{ buildout.directory }}"
    state: directory
    owner: plone_daemon
    group: plone_group
    mode: "u=rwx,g=rx,o=rx"
    recurse: yes

- name: Checkout buildout from git
  git:
    repo: "{{ buildout.src.src }}"
    dest: "{{ buildout.program_path }}/{{ buildout.directory }}"
    clone: yes
    remote: origin
    update: yes
    version: "{{ buildout.src.rev }}"
    force: yes
  when: buildout.src.type|lower == "git" and buildout.src.src
  become_user: plone_buildout
  environment:
    http_proxy: "{{ lookup('env', 'http_proxy') }}"
    https_proxy: "{{ lookup('env', 'https_proxy') }}"
    GIT_SSL_NO_VERIFY: "true"

- name: "Ensure git config settings"
  command:
    cmd: git config core.fileMode false
    chdir: "{{ buildout.program_path }}/{{ buildout.directory }}"
  when: buildout.src.type|lower == "git" and buildout.src.src

- name: "Checkout buildout from subversion"
  subversion:
    repo: "{{ buildout.src.src }}"
    dest: "{{ buildout.program_path }}/{{ buildout.directory }}"
    revision: "{{ buildout.src.rev }}"
  when: buildout.src.type|lower == "svn" and buildout.src.src
  become_user: ansible
  environment:
    http_proxy: "{{ lookup('env', 'http_proxy') }}"
    https_proxy: "{{ lookup('env', 'https_proxy') }}"

- name: "Create virtualenv in buildout directory"
  #command: virtaulenv --no-pip --no-setuptools --no-wheel --no-site-packages {{ buildout.program_path }}/{{ buildout.directory }}
  command:
    cmd: python3 -m venv {{ buildout.program_path }}/{{ buildout.directory }}
    chdir: "{{ buildout.program_path }}"
    creates: "{{ buildout.program_path }}/{{ buildout.directory }}/bin/activate"
  #register: virtualenv_setup
  #ignore_errors: yes
  #failed_when: "'Permission denied' in virtualenv_setup.stderr"

- name: "Ensure buildout-directory is owned by user plone_buildout"
  file:
    path: "{{ buildout.program_path }}/{{ buildout.directory }}"
    mode: "u=rwx,g=rx,o=rx"
    owner: plone_buildout
    group: plone_group
    recurse: yes
    state: directory

- name: "Ensure buildout-var-directory is aktually a symlink to {{ buildout.data_path }}/{{buildout.directory}} owned by user plone_daemon"
  file:
    path: "{{ buildout.program_path }}/{{ buildout.directory }}/var"
    src: "{{ buildout.data_path }}/{{ buildout.directory }}"
    owner: plone_daemon
    group: plone_group
    state: link
    force: yes

- name: "Ensure buildout-var-directory is owned by user plone_daemon"
  file:
    path: "{{ buildout.data_path }}{{ buildout.directory }}/var/."
    state: directory
    mode: "u=rwx,g=rwx,o=rx"
    owner: plone_daemon
    group: plone_group
    recurse: yes

#- name: "Preset Buildout config"
#  file:
#    path: "{{ buildout.program_path }}/{{ buildout.directory }}/buildout.cfg"
#    src: "{{ buildout.program_path }}/{{ buildout.directory }}/{{ buildout.config }}"
#    state: link
#    owner: plone_buildout
#    group: plone_group

- name: "Preset Buildout config (Starzel Buildout)"
  file:
    path: "{{ buildout.program_path }}/{{ buildout.directory }}/local.cfg"
    src: "{{ buildout.program_path }}/{{ buildout.directory }}/{{ buildout.config }}"
    state: link
    owner: plone_buildout
    group: plone_group

- name: "Copy secrets.cfg if provided"
  template:
    dest: "{{ buildout.program_path }}/{{ buildout.directory }}/secret.cfg"
    src: "{{ buildout.secrets }}"
    force: no
    owner: plone_buildout
    group: plone_group
    mode: "u=r,g=,o="
  when: buildout.requires_secrets

- block:
  #- name: "Bootstrap buildout"
  #  command:
  #    cmd: python bootstrap.py --version=2.4.4 --setuptools-version=18.4
  #    chdir: "{{ buildout.program_path }}/{{ buildout.directory }}"
  #    creates: "{{ buildout.program_path }}/{{ buildout.directory }}/bin/buildout"

  - name: "Bootstrap buildout"
    pip:
      name:
        - zc.buildout==2.13.3
        - setuptools==42.0.2
      state: present
      #virtualenv: "{{ buildout.program_path }}/{{ buildout.directory }}"
      executable: "{{ buildout.program_path }}/{{ buildout.directory }}/bin/pip"
      chdir: "{{ buildout.program_path }}/{{ buildout.directory }}"

  - name: "Run buildout"
    command:
      cmd: "{{ buildout.program_path }}/{{ buildout.directory }}/bin/buildout {{ buildout.mode }}"
      chdir: "{{ buildout.program_path }}/{{ buildout.directory }}"

  - name: "Find checkout packages"
    find:
      paths: "{{ buildout.program_path }}/{{ buildout.directory }}/src/"
      file_type: directory
      recurse: no
    register: src_dirs

  - name: "Update git config"
    command:
      cmd: git config core.fileMode false
      chdir: "{{ item.path }}"
    with_items: "{{ src_dirs.files }}"
    ignore_errors: yes

  environment:
    VIRTUAL_ENV: "{{ buildout.program_path }}/{{ buildout.directory }}"
    PATH: "{{ buildout.program_path }}/{{ buildout.directory }}/bin:{{ ansible_env.PATH }}"
    http_proxy: "{{ lookup('env', 'http_proxy') }}"
    https_proxy: "{{ lookup('env', 'https_proxy') }}"
  become_user: plone_buildout

- block: # "Compile i18n:modules"

  - name: "Delete existing mo files of buildout-cache"
    command:
      cmd: find . -iname *.mo -delete
      chdir: "/usr/local/buildout-cache"

  - name: "Compile po to po.mo files of buildout-cache"
    command:
      cmd: find . -iname *.po -exec msgfmt {} -o {}.mo \;
      chdir: "/usr/local/buildout-cache"

  - name: "Rename po.mo to mo files of buildout-cache"
    command:
      cmd: find . -iname *.po.mo -exec rename 's/.po.mo/.mo/' {} \;
      chdir: "/usr/local/buildout-cache"

  - name: "Delete existing mo files of src"
    command:
      cmd: find . -iname *.mo -delete
      chdir: "{{ buildout.program_path }}/{{ buildout.directory }}/src"

  - name: "Compile po to po.mo files of src"
    command:
      cmd: find . -iname *.po -exec msgfmt {} -o {}.mo \;
      chdir: "{{ buildout.program_path }}/{{ buildout.directory }}/src"

  - name: "Rename po.mo to mo files of src"
    command:
      cmd: find . -iname *.po.mo -exec rename 's/.po.mo/.mo/' {} \;
      chdir: "{{ buildout.program_path }}/{{ buildout.directory }}/src"

  become_user: plone_buildout

- name: "Ensure buildout-directory is owned by user plone_buildout"
  file:
    path: "{{ buildout.program_path }}/{{ buildout.directory }}"
    state: directory
    owner: plone_buildout
    group: plone_group
    mode: "u=rwx,g=rx,o=rx"
    recurse: yes

- name: "Ensure buildout-data-directory is owned by user plone_daemon"
  file:
    path: "{{ buildout.data_path }}/{{ buildout.directory }}"
    state: directory
    owner: plone_daemon
    group: plone_group
    mode: "u=rwx,g=rwx,o=rx"
    recurse: yes
